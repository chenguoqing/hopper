/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hopper.server.thrift;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class HopperService {

    /**
     * Hopper service interface
     */
    public interface Iface {

        /**
         * Login the client with userName/password
         *
         * @param userName
         * @param password
         */
        public String login(String userName, String password) throws RetryException, AuthenticationException, org.apache.thrift.TException;

        /**
         * Re-Login with previous sessionId
         *
         * @param sessionId
         */
        public void reLogin(String sessionId) throws RetryException, org.apache.thrift.TException;

        /**
         * logout the session identified by sessionId
         *
         * @param sessionId
         */
        public void logout(String sessionId) throws org.apache.thrift.TException;

        /**
         * ping server
         */
        public void ping() throws org.apache.thrift.TException;

        /**
         * Create a state with initial value
         *
         * @param key
         * @param owner
         * @param initStatus
         * @param invalidateStatus
         */
        public void create(String key, String owner, int initStatus, int invalidateStatus) throws RetryException, org.apache.thrift.TException;

        /**
         * Update the status bound with key with CAS condition
         *
         * @param key
         * @param expectStatus
         * @param newStatus
         * @param owner
         * @param lease
         */
        public void updateStatus(String key, int expectStatus, int newStatus, String owner, int lease) throws RetryException, StateCASException, org.apache.thrift.TException;

        /**
         * Update the lease property bound with key with CAS condition
         *
         * @param key
         * @param expectStatus
         * @param owner
         * @param lease
         */
        public void updateLease(String key, int expectStatus, String owner, int lease) throws RetryException, StateCASException, org.apache.thrift.TException;

        /**
         * Watch the special status(add a listener)
         *
         * @param key
         * @param expectStatus
         */
        public void watch(String key, int expectStatus) throws RetryException, ExpectStatusException, org.apache.thrift.TException;

        /**
         * Callback method by server for notifying the status change
         *
         * @param oldStatus
         * @param newStatus
         */
        public void statusChange(int oldStatus, int newStatus) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void login(String userName, String password, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.login_call> resultHandler) throws org.apache.thrift.TException;

        public void reLogin(String sessionId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.reLogin_call> resultHandler) throws org.apache.thrift.TException;

        public void logout(String sessionId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.logout_call> resultHandler) throws org.apache.thrift.TException;

        public void ping(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ping_call> resultHandler) throws org.apache.thrift.TException;

        public void create(String key, String owner, int initStatus, int invalidateStatus, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_call> resultHandler) throws org.apache.thrift.TException;

        public void updateStatus(String key, int expectStatus, int newStatus, String owner, int lease, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateStatus_call> resultHandler) throws org.apache.thrift.TException;

        public void updateLease(String key, int expectStatus, String owner, int lease, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateLease_call> resultHandler) throws org.apache.thrift.TException;

        public void watch(String key, int expectStatus, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.watch_call> resultHandler) throws org.apache.thrift.TException;

        public void statusChange(int oldStatus, int newStatus, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.statusChange_call> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public String login(String userName, String password) throws RetryException, AuthenticationException, org.apache.thrift.TException
        {
            send_login(userName, password);
            return recv_login();
        }

        public void send_login(String userName, String password) throws org.apache.thrift.TException
        {
            login_args args = new login_args();
            args.setUserName(userName);
            args.setPassword(password);
            sendBase("login", args);
        }

        public String recv_login() throws RetryException, AuthenticationException, org.apache.thrift.TException
        {
            login_result result = new login_result();
            receiveBase(result, "login");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.re != null) {
                throw result.re;
            }
            if (result.ae != null) {
                throw result.ae;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "login failed: unknown result");
        }

        public void reLogin(String sessionId) throws RetryException, org.apache.thrift.TException
        {
            send_reLogin(sessionId);
            recv_reLogin();
        }

        public void send_reLogin(String sessionId) throws org.apache.thrift.TException
        {
            reLogin_args args = new reLogin_args();
            args.setSessionId(sessionId);
            sendBase("reLogin", args);
        }

        public void recv_reLogin() throws RetryException, org.apache.thrift.TException
        {
            reLogin_result result = new reLogin_result();
            receiveBase(result, "reLogin");
            if (result.e != null) {
                throw result.e;
            }
            return;
        }

        public void logout(String sessionId) throws org.apache.thrift.TException
        {
            send_logout(sessionId);
            recv_logout();
        }

        public void send_logout(String sessionId) throws org.apache.thrift.TException
        {
            logout_args args = new logout_args();
            args.setSessionId(sessionId);
            sendBase("logout", args);
        }

        public void recv_logout() throws org.apache.thrift.TException
        {
            logout_result result = new logout_result();
            receiveBase(result, "logout");
            return;
        }

        public void ping() throws org.apache.thrift.TException
        {
            send_ping();
            recv_ping();
        }

        public void send_ping() throws org.apache.thrift.TException
        {
            ping_args args = new ping_args();
            sendBase("ping", args);
        }

        public void recv_ping() throws org.apache.thrift.TException
        {
            ping_result result = new ping_result();
            receiveBase(result, "ping");
            return;
        }

        public void create(String key, String owner, int initStatus, int invalidateStatus) throws RetryException, org.apache.thrift.TException
        {
            send_create(key, owner, initStatus, invalidateStatus);
            recv_create();
        }

        public void send_create(String key, String owner, int initStatus, int invalidateStatus) throws org.apache.thrift.TException
        {
            create_args args = new create_args();
            args.setKey(key);
            args.setOwner(owner);
            args.setInitStatus(initStatus);
            args.setInvalidateStatus(invalidateStatus);
            sendBase("create", args);
        }

        public void recv_create() throws RetryException, org.apache.thrift.TException
        {
            create_result result = new create_result();
            receiveBase(result, "create");
            if (result.e != null) {
                throw result.e;
            }
            return;
        }

        public void updateStatus(String key, int expectStatus, int newStatus, String owner, int lease) throws RetryException, StateCASException, org.apache.thrift.TException
        {
            send_updateStatus(key, expectStatus, newStatus, owner, lease);
            recv_updateStatus();
        }

        public void send_updateStatus(String key, int expectStatus, int newStatus, String owner, int lease) throws org.apache.thrift.TException
        {
            updateStatus_args args = new updateStatus_args();
            args.setKey(key);
            args.setExpectStatus(expectStatus);
            args.setNewStatus(newStatus);
            args.setOwner(owner);
            args.setLease(lease);
            sendBase("updateStatus", args);
        }

        public void recv_updateStatus() throws RetryException, StateCASException, org.apache.thrift.TException
        {
            updateStatus_result result = new updateStatus_result();
            receiveBase(result, "updateStatus");
            if (result.re != null) {
                throw result.re;
            }
            if (result.se != null) {
                throw result.se;
            }
            return;
        }

        public void updateLease(String key, int expectStatus, String owner, int lease) throws RetryException, StateCASException, org.apache.thrift.TException
        {
            send_updateLease(key, expectStatus, owner, lease);
            recv_updateLease();
        }

        public void send_updateLease(String key, int expectStatus, String owner, int lease) throws org.apache.thrift.TException
        {
            updateLease_args args = new updateLease_args();
            args.setKey(key);
            args.setExpectStatus(expectStatus);
            args.setOwner(owner);
            args.setLease(lease);
            sendBase("updateLease", args);
        }

        public void recv_updateLease() throws RetryException, StateCASException, org.apache.thrift.TException
        {
            updateLease_result result = new updateLease_result();
            receiveBase(result, "updateLease");
            if (result.re != null) {
                throw result.re;
            }
            if (result.se != null) {
                throw result.se;
            }
            return;
        }

        public void watch(String key, int expectStatus) throws RetryException, ExpectStatusException, org.apache.thrift.TException
        {
            send_watch(key, expectStatus);
            recv_watch();
        }

        public void send_watch(String key, int expectStatus) throws org.apache.thrift.TException
        {
            watch_args args = new watch_args();
            args.setKey(key);
            args.setExpectStatus(expectStatus);
            sendBase("watch", args);
        }

        public void recv_watch() throws RetryException, ExpectStatusException, org.apache.thrift.TException
        {
            watch_result result = new watch_result();
            receiveBase(result, "watch");
            if (result.re != null) {
                throw result.re;
            }
            if (result.ese != null) {
                throw result.ese;
            }
            return;
        }

        public void statusChange(int oldStatus, int newStatus) throws org.apache.thrift.TException
        {
            send_statusChange(oldStatus, newStatus);
        }

        public void send_statusChange(int oldStatus, int newStatus) throws org.apache.thrift.TException
        {
            statusChange_args args = new statusChange_args();
            args.setOldStatus(oldStatus);
            args.setNewStatus(newStatus);
            sendBase("statusChange", args);
        }

    }
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void login(String userName, String password, org.apache.thrift.async.AsyncMethodCallback<login_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            login_call method_call = new login_call(userName, password, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class login_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String userName;
            private String password;
            public login_call(String userName, String password, org.apache.thrift.async.AsyncMethodCallback<login_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userName = userName;
                this.password = password;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.CALL, 0));
                login_args args = new login_args();
                args.setUserName(userName);
                args.setPassword(password);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws RetryException, AuthenticationException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_login();
            }
        }

        public void reLogin(String sessionId, org.apache.thrift.async.AsyncMethodCallback<reLogin_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            reLogin_call method_call = new reLogin_call(sessionId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class reLogin_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String sessionId;
            public reLogin_call(String sessionId, org.apache.thrift.async.AsyncMethodCallback<reLogin_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.sessionId = sessionId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reLogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
                reLogin_args args = new reLogin_args();
                args.setSessionId(sessionId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws RetryException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_reLogin();
            }
        }

        public void logout(String sessionId, org.apache.thrift.async.AsyncMethodCallback<logout_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            logout_call method_call = new logout_call(sessionId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class logout_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String sessionId;
            public logout_call(String sessionId, org.apache.thrift.async.AsyncMethodCallback<logout_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.sessionId = sessionId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logout", org.apache.thrift.protocol.TMessageType.CALL, 0));
                logout_args args = new logout_args();
                args.setSessionId(sessionId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_logout();
            }
        }

        public void ping(org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
            public ping_call(org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
                ping_args args = new ping_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_ping();
            }
        }

        public void create(String key, String owner, int initStatus, int invalidateStatus, org.apache.thrift.async.AsyncMethodCallback<create_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            create_call method_call = new create_call(key, owner, initStatus, invalidateStatus, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class create_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String key;
            private String owner;
            private int initStatus;
            private int invalidateStatus;
            public create_call(String key, String owner, int initStatus, int invalidateStatus, org.apache.thrift.async.AsyncMethodCallback<create_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.key = key;
                this.owner = owner;
                this.initStatus = initStatus;
                this.invalidateStatus = invalidateStatus;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create", org.apache.thrift.protocol.TMessageType.CALL, 0));
                create_args args = new create_args();
                args.setKey(key);
                args.setOwner(owner);
                args.setInitStatus(initStatus);
                args.setInvalidateStatus(invalidateStatus);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws RetryException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_create();
            }
        }

        public void updateStatus(String key, int expectStatus, int newStatus, String owner, int lease, org.apache.thrift.async.AsyncMethodCallback<updateStatus_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateStatus_call method_call = new updateStatus_call(key, expectStatus, newStatus, owner, lease, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updateStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String key;
            private int expectStatus;
            private int newStatus;
            private String owner;
            private int lease;
            public updateStatus_call(String key, int expectStatus, int newStatus, String owner, int lease, org.apache.thrift.async.AsyncMethodCallback<updateStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.key = key;
                this.expectStatus = expectStatus;
                this.newStatus = newStatus;
                this.owner = owner;
                this.lease = lease;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateStatus_args args = new updateStatus_args();
                args.setKey(key);
                args.setExpectStatus(expectStatus);
                args.setNewStatus(newStatus);
                args.setOwner(owner);
                args.setLease(lease);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws RetryException, StateCASException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_updateStatus();
            }
        }

        public void updateLease(String key, int expectStatus, String owner, int lease, org.apache.thrift.async.AsyncMethodCallback<updateLease_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateLease_call method_call = new updateLease_call(key, expectStatus, owner, lease, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updateLease_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String key;
            private int expectStatus;
            private String owner;
            private int lease;
            public updateLease_call(String key, int expectStatus, String owner, int lease, org.apache.thrift.async.AsyncMethodCallback<updateLease_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.key = key;
                this.expectStatus = expectStatus;
                this.owner = owner;
                this.lease = lease;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateLease", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateLease_args args = new updateLease_args();
                args.setKey(key);
                args.setExpectStatus(expectStatus);
                args.setOwner(owner);
                args.setLease(lease);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws RetryException, StateCASException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_updateLease();
            }
        }

        public void watch(String key, int expectStatus, org.apache.thrift.async.AsyncMethodCallback<watch_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            watch_call method_call = new watch_call(key, expectStatus, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class watch_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String key;
            private int expectStatus;
            public watch_call(String key, int expectStatus, org.apache.thrift.async.AsyncMethodCallback<watch_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.key = key;
                this.expectStatus = expectStatus;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("watch", org.apache.thrift.protocol.TMessageType.CALL, 0));
                watch_args args = new watch_args();
                args.setKey(key);
                args.setExpectStatus(expectStatus);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws RetryException, ExpectStatusException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_watch();
            }
        }

        public void statusChange(int oldStatus, int newStatus, org.apache.thrift.async.AsyncMethodCallback<statusChange_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            statusChange_call method_call = new statusChange_call(oldStatus, newStatus, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class statusChange_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int oldStatus;
            private int newStatus;
            public statusChange_call(int oldStatus, int newStatus, org.apache.thrift.async.AsyncMethodCallback<statusChange_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, true);
                this.oldStatus = oldStatus;
                this.newStatus = newStatus;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statusChange", org.apache.thrift.protocol.TMessageType.CALL, 0));
                statusChange_args args = new statusChange_args();
                args.setOldStatus(oldStatus);
                args.setNewStatus(newStatus);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("login", new login());
            processMap.put("reLogin", new reLogin());
            processMap.put("logout", new logout());
            processMap.put("ping", new ping());
            processMap.put("create", new create());
            processMap.put("updateStatus", new updateStatus());
            processMap.put("updateLease", new updateLease());
            processMap.put("watch", new watch());
            processMap.put("statusChange", new statusChange());
            return processMap;
        }

        private static class login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, login_args> {
            public login() {
                super("login");
            }

            protected login_args getEmptyArgsInstance() {
                return new login_args();
            }

            protected login_result getResult(I iface, login_args args) throws org.apache.thrift.TException {
                login_result result = new login_result();
                try {
                    result.success = iface.login(args.userName, args.password);
                } catch (RetryException re) {
                    result.re = re;
                } catch (AuthenticationException ae) {
                    result.ae = ae;
                }
                return result;
            }
        }

        private static class reLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reLogin_args> {
            public reLogin() {
                super("reLogin");
            }

            protected reLogin_args getEmptyArgsInstance() {
                return new reLogin_args();
            }

            protected reLogin_result getResult(I iface, reLogin_args args) throws org.apache.thrift.TException {
                reLogin_result result = new reLogin_result();
                try {
                    iface.reLogin(args.sessionId);
                } catch (RetryException e) {
                    result.e = e;
                }
                return result;
            }
        }

        private static class logout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logout_args> {
            public logout() {
                super("logout");
            }

            protected logout_args getEmptyArgsInstance() {
                return new logout_args();
            }

            protected logout_result getResult(I iface, logout_args args) throws org.apache.thrift.TException {
                logout_result result = new logout_result();
                iface.logout(args.sessionId);
                return result;
            }
        }

        private static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
            public ping() {
                super("ping");
            }

            protected ping_args getEmptyArgsInstance() {
                return new ping_args();
            }

            protected ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
                ping_result result = new ping_result();
                iface.ping();
                return result;
            }
        }

        private static class create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_args> {
            public create() {
                super("create");
            }

            protected create_args getEmptyArgsInstance() {
                return new create_args();
            }

            protected create_result getResult(I iface, create_args args) throws org.apache.thrift.TException {
                create_result result = new create_result();
                try {
                    iface.create(args.key, args.owner, args.initStatus, args.invalidateStatus);
                } catch (RetryException e) {
                    result.e = e;
                }
                return result;
            }
        }

        private static class updateStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStatus_args> {
            public updateStatus() {
                super("updateStatus");
            }

            protected updateStatus_args getEmptyArgsInstance() {
                return new updateStatus_args();
            }

            protected updateStatus_result getResult(I iface, updateStatus_args args) throws org.apache.thrift.TException {
                updateStatus_result result = new updateStatus_result();
                try {
                    iface.updateStatus(args.key, args.expectStatus, args.newStatus, args.owner, args.lease);
                } catch (RetryException re) {
                    result.re = re;
                } catch (StateCASException se) {
                    result.se = se;
                }
                return result;
            }
        }

        private static class updateLease<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateLease_args> {
            public updateLease() {
                super("updateLease");
            }

            protected updateLease_args getEmptyArgsInstance() {
                return new updateLease_args();
            }

            protected updateLease_result getResult(I iface, updateLease_args args) throws org.apache.thrift.TException {
                updateLease_result result = new updateLease_result();
                try {
                    iface.updateLease(args.key, args.expectStatus, args.owner, args.lease);
                } catch (RetryException re) {
                    result.re = re;
                } catch (StateCASException se) {
                    result.se = se;
                }
                return result;
            }
        }

        private static class watch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, watch_args> {
            public watch() {
                super("watch");
            }

            protected watch_args getEmptyArgsInstance() {
                return new watch_args();
            }

            protected watch_result getResult(I iface, watch_args args) throws org.apache.thrift.TException {
                watch_result result = new watch_result();
                try {
                    iface.watch(args.key, args.expectStatus);
                } catch (RetryException re) {
                    result.re = re;
                } catch (ExpectStatusException ese) {
                    result.ese = ese;
                }
                return result;
            }
        }

        private static class statusChange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statusChange_args> {
            public statusChange() {
                super("statusChange");
            }

            protected statusChange_args getEmptyArgsInstance() {
                return new statusChange_args();
            }

            protected org.apache.thrift.TBase getResult(I iface, statusChange_args args) throws org.apache.thrift.TException {
                iface.statusChange(args.oldStatus, args.newStatus);
                return null;
            }
        }

    }

    public static class login_args implements org.apache.thrift.TBase<login_args, login_args._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_args");

        private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new login_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new login_argsTupleSchemeFactory());
        }

        public String userName; // required
        public String password; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_NAME((short)1, "userName"),
            PASSWORD((short)2, "password");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_NAME
                        return USER_NAME;
                    case 2: // PASSWORD
                        return PASSWORD;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_args.class, metaDataMap);
        }

        public login_args() {
        }

        public login_args(
                String userName,
                String password)
        {
            this();
            this.userName = userName;
            this.password = password;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public login_args(login_args other) {
            if (other.isSetUserName()) {
                this.userName = other.userName;
            }
            if (other.isSetPassword()) {
                this.password = other.password;
            }
        }

        public login_args deepCopy() {
            return new login_args(this);
        }

        @Override
        public void clear() {
            this.userName = null;
            this.password = null;
        }

        public String getUserName() {
            return this.userName;
        }

        public login_args setUserName(String userName) {
            this.userName = userName;
            return this;
        }

        public void unsetUserName() {
            this.userName = null;
        }

        /** Returns true if field userName is set (has been assigned a value) and false otherwise */
        public boolean isSetUserName() {
            return this.userName != null;
        }

        public void setUserNameIsSet(boolean value) {
            if (!value) {
                this.userName = null;
            }
        }

        public String getPassword() {
            return this.password;
        }

        public login_args setPassword(String password) {
            this.password = password;
            return this;
        }

        public void unsetPassword() {
            this.password = null;
        }

        /** Returns true if field password is set (has been assigned a value) and false otherwise */
        public boolean isSetPassword() {
            return this.password != null;
        }

        public void setPasswordIsSet(boolean value) {
            if (!value) {
                this.password = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_NAME:
                    if (value == null) {
                        unsetUserName();
                    } else {
                        setUserName((String)value);
                    }
                    break;

                case PASSWORD:
                    if (value == null) {
                        unsetPassword();
                    } else {
                        setPassword((String)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_NAME:
                    return getUserName();

                case PASSWORD:
                    return getPassword();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USER_NAME:
                    return isSetUserName();
                case PASSWORD:
                    return isSetPassword();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof login_args)
                return this.equals((login_args)that);
            return false;
        }

        public boolean equals(login_args that) {
            if (that == null)
                return false;

            boolean this_present_userName = true && this.isSetUserName();
            boolean that_present_userName = true && that.isSetUserName();
            if (this_present_userName || that_present_userName) {
                if (!(this_present_userName && that_present_userName))
                    return false;
                if (!this.userName.equals(that.userName))
                    return false;
            }

            boolean this_present_password = true && this.isSetPassword();
            boolean that_present_password = true && that.isSetPassword();
            if (this_present_password || that_present_password) {
                if (!(this_present_password && that_present_password))
                    return false;
                if (!this.password.equals(that.password))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(login_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            login_args typedOther = (login_args)other;

            lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPassword()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("login_args(");
            boolean first = true;

            sb.append("userName:");
            if (this.userName == null) {
                sb.append("null");
            } else {
                sb.append(this.userName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("password:");
            if (this.password == null) {
                sb.append("null");
            } else {
                sb.append(this.password);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class login_argsStandardSchemeFactory implements SchemeFactory {
            public login_argsStandardScheme getScheme() {
                return new login_argsStandardScheme();
            }
        }

        private static class login_argsStandardScheme extends StandardScheme<login_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, login_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userName = iprot.readString();
                                struct.setUserNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PASSWORD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.password = iprot.readString();
                                struct.setPasswordIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, login_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userName != null) {
                    oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                    oprot.writeString(struct.userName);
                    oprot.writeFieldEnd();
                }
                if (struct.password != null) {
                    oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
                    oprot.writeString(struct.password);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class login_argsTupleSchemeFactory implements SchemeFactory {
            public login_argsTupleScheme getScheme() {
                return new login_argsTupleScheme();
            }
        }

        private static class login_argsTupleScheme extends TupleScheme<login_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUserName()) {
                    optionals.set(0);
                }
                if (struct.isSetPassword()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetUserName()) {
                    oprot.writeString(struct.userName);
                }
                if (struct.isSetPassword()) {
                    oprot.writeString(struct.password);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.userName = iprot.readString();
                    struct.setUserNameIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.password = iprot.readString();
                    struct.setPasswordIsSet(true);
                }
            }
        }

    }

    public static class login_result implements org.apache.thrift.TBase<login_result, login_result._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
        private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);
        private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new login_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new login_resultTupleSchemeFactory());
        }

        public String success; // required
        public RetryException re; // required
        public AuthenticationException ae; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            RE((short)1, "re"),
            AE((short)2, "ae");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // RE
                        return RE;
                    case 2: // AE
                        return AE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_result.class, metaDataMap);
        }

        public login_result() {
        }

        public login_result(
                String success,
                RetryException re,
                AuthenticationException ae)
        {
            this();
            this.success = success;
            this.re = re;
            this.ae = ae;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public login_result(login_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetRe()) {
                this.re = new RetryException(other.re);
            }
            if (other.isSetAe()) {
                this.ae = new AuthenticationException(other.ae);
            }
        }

        public login_result deepCopy() {
            return new login_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.re = null;
            this.ae = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public login_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public RetryException getRe() {
            return this.re;
        }

        public login_result setRe(RetryException re) {
            this.re = re;
            return this;
        }

        public void unsetRe() {
            this.re = null;
        }

        /** Returns true if field re is set (has been assigned a value) and false otherwise */
        public boolean isSetRe() {
            return this.re != null;
        }

        public void setReIsSet(boolean value) {
            if (!value) {
                this.re = null;
            }
        }

        public AuthenticationException getAe() {
            return this.ae;
        }

        public login_result setAe(AuthenticationException ae) {
            this.ae = ae;
            return this;
        }

        public void unsetAe() {
            this.ae = null;
        }

        /** Returns true if field ae is set (has been assigned a value) and false otherwise */
        public boolean isSetAe() {
            return this.ae != null;
        }

        public void setAeIsSet(boolean value) {
            if (!value) {
                this.ae = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String)value);
                    }
                    break;

                case RE:
                    if (value == null) {
                        unsetRe();
                    } else {
                        setRe((RetryException)value);
                    }
                    break;

                case AE:
                    if (value == null) {
                        unsetAe();
                    } else {
                        setAe((AuthenticationException)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case RE:
                    return getRe();

                case AE:
                    return getAe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case RE:
                    return isSetRe();
                case AE:
                    return isSetAe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof login_result)
                return this.equals((login_result)that);
            return false;
        }

        public boolean equals(login_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_re = true && this.isSetRe();
            boolean that_present_re = true && that.isSetRe();
            if (this_present_re || that_present_re) {
                if (!(this_present_re && that_present_re))
                    return false;
                if (!this.re.equals(that.re))
                    return false;
            }

            boolean this_present_ae = true && this.isSetAe();
            boolean that_present_ae = true && that.isSetAe();
            if (this_present_ae || that_present_ae) {
                if (!(this_present_ae && that_present_ae))
                    return false;
                if (!this.ae.equals(that.ae))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(login_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            login_result typedOther = (login_result)other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetRe()).compareTo(typedOther.isSetRe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRe()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, typedOther.re);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAe()).compareTo(typedOther.isSetAe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAe()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, typedOther.ae);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("login_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("re:");
            if (this.re == null) {
                sb.append("null");
            } else {
                sb.append(this.re);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ae:");
            if (this.ae == null) {
                sb.append("null");
            } else {
                sb.append(this.ae);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class login_resultStandardSchemeFactory implements SchemeFactory {
            public login_resultStandardScheme getScheme() {
                return new login_resultStandardScheme();
            }
        }

        private static class login_resultStandardScheme extends StandardScheme<login_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, login_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // RE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.re = new RetryException();
                                struct.re.read(iprot);
                                struct.setReIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // AE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ae = new AuthenticationException();
                                struct.ae.read(iprot);
                                struct.setAeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, login_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.re != null) {
                    oprot.writeFieldBegin(RE_FIELD_DESC);
                    struct.re.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ae != null) {
                    oprot.writeFieldBegin(AE_FIELD_DESC);
                    struct.ae.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class login_resultTupleSchemeFactory implements SchemeFactory {
            public login_resultTupleScheme getScheme() {
                return new login_resultTupleScheme();
            }
        }

        private static class login_resultTupleScheme extends TupleScheme<login_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetRe()) {
                    optionals.set(1);
                }
                if (struct.isSetAe()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetRe()) {
                    struct.re.write(oprot);
                }
                if (struct.isSetAe()) {
                    struct.ae.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.re = new RetryException();
                    struct.re.read(iprot);
                    struct.setReIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.ae = new AuthenticationException();
                    struct.ae.read(iprot);
                    struct.setAeIsSet(true);
                }
            }
        }

    }

    public static class reLogin_args implements org.apache.thrift.TBase<reLogin_args, reLogin_args._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reLogin_args");

        private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new reLogin_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new reLogin_argsTupleSchemeFactory());
        }

        public String sessionId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SESSION_ID((short)1, "sessionId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // SESSION_ID
                        return SESSION_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reLogin_args.class, metaDataMap);
        }

        public reLogin_args() {
        }

        public reLogin_args(
                String sessionId)
        {
            this();
            this.sessionId = sessionId;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public reLogin_args(reLogin_args other) {
            if (other.isSetSessionId()) {
                this.sessionId = other.sessionId;
            }
        }

        public reLogin_args deepCopy() {
            return new reLogin_args(this);
        }

        @Override
        public void clear() {
            this.sessionId = null;
        }

        public String getSessionId() {
            return this.sessionId;
        }

        public reLogin_args setSessionId(String sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        public void unsetSessionId() {
            this.sessionId = null;
        }

        /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
        public boolean isSetSessionId() {
            return this.sessionId != null;
        }

        public void setSessionIdIsSet(boolean value) {
            if (!value) {
                this.sessionId = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SESSION_ID:
                    if (value == null) {
                        unsetSessionId();
                    } else {
                        setSessionId((String)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SESSION_ID:
                    return getSessionId();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SESSION_ID:
                    return isSetSessionId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof reLogin_args)
                return this.equals((reLogin_args)that);
            return false;
        }

        public boolean equals(reLogin_args that) {
            if (that == null)
                return false;

            boolean this_present_sessionId = true && this.isSetSessionId();
            boolean that_present_sessionId = true && that.isSetSessionId();
            if (this_present_sessionId || that_present_sessionId) {
                if (!(this_present_sessionId && that_present_sessionId))
                    return false;
                if (!this.sessionId.equals(that.sessionId))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(reLogin_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            reLogin_args typedOther = (reLogin_args)other;

            lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSessionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("reLogin_args(");
            boolean first = true;

            sb.append("sessionId:");
            if (this.sessionId == null) {
                sb.append("null");
            } else {
                sb.append(this.sessionId);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class reLogin_argsStandardSchemeFactory implements SchemeFactory {
            public reLogin_argsStandardScheme getScheme() {
                return new reLogin_argsStandardScheme();
            }
        }

        private static class reLogin_argsStandardScheme extends StandardScheme<reLogin_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, reLogin_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SESSION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.sessionId = iprot.readString();
                                struct.setSessionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, reLogin_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.sessionId != null) {
                    oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
                    oprot.writeString(struct.sessionId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class reLogin_argsTupleSchemeFactory implements SchemeFactory {
            public reLogin_argsTupleScheme getScheme() {
                return new reLogin_argsTupleScheme();
            }
        }

        private static class reLogin_argsTupleScheme extends TupleScheme<reLogin_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, reLogin_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSessionId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSessionId()) {
                    oprot.writeString(struct.sessionId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, reLogin_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.sessionId = iprot.readString();
                    struct.setSessionIdIsSet(true);
                }
            }
        }

    }

    public static class reLogin_result implements org.apache.thrift.TBase<reLogin_result, reLogin_result._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reLogin_result");

        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new reLogin_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new reLogin_resultTupleSchemeFactory());
        }

        public RetryException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            E((short)1, "e");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reLogin_result.class, metaDataMap);
        }

        public reLogin_result() {
        }

        public reLogin_result(
                RetryException e)
        {
            this();
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public reLogin_result(reLogin_result other) {
            if (other.isSetE()) {
                this.e = new RetryException(other.e);
            }
        }

        public reLogin_result deepCopy() {
            return new reLogin_result(this);
        }

        @Override
        public void clear() {
            this.e = null;
        }

        public RetryException getE() {
            return this.e;
        }

        public reLogin_result setE(RetryException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((RetryException)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case E:
                    return getE();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case E:
                    return isSetE();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof reLogin_result)
                return this.equals((reLogin_result)that);
            return false;
        }

        public boolean equals(reLogin_result that) {
            if (that == null)
                return false;

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(reLogin_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            reLogin_result typedOther = (reLogin_result)other;

            lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("reLogin_result(");
            boolean first = true;

            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class reLogin_resultStandardSchemeFactory implements SchemeFactory {
            public reLogin_resultStandardScheme getScheme() {
                return new reLogin_resultStandardScheme();
            }
        }

        private static class reLogin_resultStandardScheme extends StandardScheme<reLogin_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, reLogin_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new RetryException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, reLogin_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class reLogin_resultTupleSchemeFactory implements SchemeFactory {
            public reLogin_resultTupleScheme getScheme() {
                return new reLogin_resultTupleScheme();
            }
        }

        private static class reLogin_resultTupleScheme extends TupleScheme<reLogin_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, reLogin_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetE()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, reLogin_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.e = new RetryException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

    }

    public static class logout_args implements org.apache.thrift.TBase<logout_args, logout_args._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logout_args");

        private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new logout_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new logout_argsTupleSchemeFactory());
        }

        public String sessionId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SESSION_ID((short)1, "sessionId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // SESSION_ID
                        return SESSION_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logout_args.class, metaDataMap);
        }

        public logout_args() {
        }

        public logout_args(
                String sessionId)
        {
            this();
            this.sessionId = sessionId;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public logout_args(logout_args other) {
            if (other.isSetSessionId()) {
                this.sessionId = other.sessionId;
            }
        }

        public logout_args deepCopy() {
            return new logout_args(this);
        }

        @Override
        public void clear() {
            this.sessionId = null;
        }

        public String getSessionId() {
            return this.sessionId;
        }

        public logout_args setSessionId(String sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        public void unsetSessionId() {
            this.sessionId = null;
        }

        /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
        public boolean isSetSessionId() {
            return this.sessionId != null;
        }

        public void setSessionIdIsSet(boolean value) {
            if (!value) {
                this.sessionId = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SESSION_ID:
                    if (value == null) {
                        unsetSessionId();
                    } else {
                        setSessionId((String)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SESSION_ID:
                    return getSessionId();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SESSION_ID:
                    return isSetSessionId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof logout_args)
                return this.equals((logout_args)that);
            return false;
        }

        public boolean equals(logout_args that) {
            if (that == null)
                return false;

            boolean this_present_sessionId = true && this.isSetSessionId();
            boolean that_present_sessionId = true && that.isSetSessionId();
            if (this_present_sessionId || that_present_sessionId) {
                if (!(this_present_sessionId && that_present_sessionId))
                    return false;
                if (!this.sessionId.equals(that.sessionId))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(logout_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            logout_args typedOther = (logout_args)other;

            lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSessionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("logout_args(");
            boolean first = true;

            sb.append("sessionId:");
            if (this.sessionId == null) {
                sb.append("null");
            } else {
                sb.append(this.sessionId);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class logout_argsStandardSchemeFactory implements SchemeFactory {
            public logout_argsStandardScheme getScheme() {
                return new logout_argsStandardScheme();
            }
        }

        private static class logout_argsStandardScheme extends StandardScheme<logout_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, logout_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SESSION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.sessionId = iprot.readString();
                                struct.setSessionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, logout_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.sessionId != null) {
                    oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
                    oprot.writeString(struct.sessionId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class logout_argsTupleSchemeFactory implements SchemeFactory {
            public logout_argsTupleScheme getScheme() {
                return new logout_argsTupleScheme();
            }
        }

        private static class logout_argsTupleScheme extends TupleScheme<logout_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, logout_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSessionId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSessionId()) {
                    oprot.writeString(struct.sessionId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, logout_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.sessionId = iprot.readString();
                    struct.setSessionIdIsSet(true);
                }
            }
        }

    }

    public static class logout_result implements org.apache.thrift.TBase<logout_result, logout_result._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logout_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new logout_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new logout_resultTupleSchemeFactory());
        }


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logout_result.class, metaDataMap);
        }

        public logout_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public logout_result(logout_result other) {
        }

        public logout_result deepCopy() {
            return new logout_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof logout_result)
                return this.equals((logout_result)that);
            return false;
        }

        public boolean equals(logout_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(logout_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            logout_result typedOther = (logout_result)other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("logout_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class logout_resultStandardSchemeFactory implements SchemeFactory {
            public logout_resultStandardScheme getScheme() {
                return new logout_resultStandardScheme();
            }
        }

        private static class logout_resultStandardScheme extends StandardScheme<logout_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, logout_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, logout_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class logout_resultTupleSchemeFactory implements SchemeFactory {
            public logout_resultTupleScheme getScheme() {
                return new logout_resultTupleScheme();
            }
        }

        private static class logout_resultTupleScheme extends TupleScheme<logout_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, logout_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, logout_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
        }


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
        }

        public ping_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ping_args(ping_args other) {
        }

        public ping_args deepCopy() {
            return new ping_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof ping_args)
                return this.equals((ping_args)that);
            return false;
        }

        public boolean equals(ping_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(ping_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            ping_args typedOther = (ping_args)other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("ping_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ping_argsStandardSchemeFactory implements SchemeFactory {
            public ping_argsStandardScheme getScheme() {
                return new ping_argsStandardScheme();
            }
        }

        private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ping_argsTupleSchemeFactory implements SchemeFactory {
            public ping_argsTupleScheme getScheme() {
                return new ping_argsTupleScheme();
            }
        }

        private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
        }


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
        }

        public ping_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ping_result(ping_result other) {
        }

        public ping_result deepCopy() {
            return new ping_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof ping_result)
                return this.equals((ping_result)that);
            return false;
        }

        public boolean equals(ping_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(ping_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            ping_result typedOther = (ping_result)other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("ping_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ping_resultStandardSchemeFactory implements SchemeFactory {
            public ping_resultStandardScheme getScheme() {
                return new ping_resultStandardScheme();
            }
        }

        private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ping_resultTupleSchemeFactory implements SchemeFactory {
            public ping_resultTupleScheme getScheme() {
                return new ping_resultTupleScheme();
            }
        }

        private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class create_args implements org.apache.thrift.TBase<create_args, create_args._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_args");

        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)2);
        private static final org.apache.thrift.protocol.TField INIT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("initStatus", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField INVALIDATE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidateStatus", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new create_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new create_argsTupleSchemeFactory());
        }

        public String key; // required
        public String owner; // required
        public int initStatus; // required
        public int invalidateStatus; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            KEY((short)1, "key"),
            OWNER((short)2, "owner"),
            INIT_STATUS((short)3, "initStatus"),
            INVALIDATE_STATUS((short)4, "invalidateStatus");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // KEY
                        return KEY;
                    case 2: // OWNER
                        return OWNER;
                    case 3: // INIT_STATUS
                        return INIT_STATUS;
                    case 4: // INVALIDATE_STATUS
                        return INVALIDATE_STATUS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __INITSTATUS_ISSET_ID = 0;
        private static final int __INVALIDATESTATUS_ISSET_ID = 1;
        private BitSet __isset_bit_vector = new BitSet(2);
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.INIT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("initStatus", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.INVALIDATE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("invalidateStatus", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_args.class, metaDataMap);
        }

        public create_args() {
        }

        public create_args(
                String key,
                String owner,
                int initStatus,
                int invalidateStatus)
        {
            this();
            this.key = key;
            this.owner = owner;
            this.initStatus = initStatus;
            setInitStatusIsSet(true);
            this.invalidateStatus = invalidateStatus;
            setInvalidateStatusIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public create_args(create_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            if (other.isSetKey()) {
                this.key = other.key;
            }
            if (other.isSetOwner()) {
                this.owner = other.owner;
            }
            this.initStatus = other.initStatus;
            this.invalidateStatus = other.invalidateStatus;
        }

        public create_args deepCopy() {
            return new create_args(this);
        }

        @Override
        public void clear() {
            this.key = null;
            this.owner = null;
            setInitStatusIsSet(false);
            this.initStatus = 0;
            setInvalidateStatusIsSet(false);
            this.invalidateStatus = 0;
        }

        public String getKey() {
            return this.key;
        }

        public create_args setKey(String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /** Returns true if field key is set (has been assigned a value) and false otherwise */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        public String getOwner() {
            return this.owner;
        }

        public create_args setOwner(String owner) {
            this.owner = owner;
            return this;
        }

        public void unsetOwner() {
            this.owner = null;
        }

        /** Returns true if field owner is set (has been assigned a value) and false otherwise */
        public boolean isSetOwner() {
            return this.owner != null;
        }

        public void setOwnerIsSet(boolean value) {
            if (!value) {
                this.owner = null;
            }
        }

        public int getInitStatus() {
            return this.initStatus;
        }

        public create_args setInitStatus(int initStatus) {
            this.initStatus = initStatus;
            setInitStatusIsSet(true);
            return this;
        }

        public void unsetInitStatus() {
            __isset_bit_vector.clear(__INITSTATUS_ISSET_ID);
        }

        /** Returns true if field initStatus is set (has been assigned a value) and false otherwise */
        public boolean isSetInitStatus() {
            return __isset_bit_vector.get(__INITSTATUS_ISSET_ID);
        }

        public void setInitStatusIsSet(boolean value) {
            __isset_bit_vector.set(__INITSTATUS_ISSET_ID, value);
        }

        public int getInvalidateStatus() {
            return this.invalidateStatus;
        }

        public create_args setInvalidateStatus(int invalidateStatus) {
            this.invalidateStatus = invalidateStatus;
            setInvalidateStatusIsSet(true);
            return this;
        }

        public void unsetInvalidateStatus() {
            __isset_bit_vector.clear(__INVALIDATESTATUS_ISSET_ID);
        }

        /** Returns true if field invalidateStatus is set (has been assigned a value) and false otherwise */
        public boolean isSetInvalidateStatus() {
            return __isset_bit_vector.get(__INVALIDATESTATUS_ISSET_ID);
        }

        public void setInvalidateStatusIsSet(boolean value) {
            __isset_bit_vector.set(__INVALIDATESTATUS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case KEY:
                    if (value == null) {
                        unsetKey();
                    } else {
                        setKey((String)value);
                    }
                    break;

                case OWNER:
                    if (value == null) {
                        unsetOwner();
                    } else {
                        setOwner((String)value);
                    }
                    break;

                case INIT_STATUS:
                    if (value == null) {
                        unsetInitStatus();
                    } else {
                        setInitStatus((Integer)value);
                    }
                    break;

                case INVALIDATE_STATUS:
                    if (value == null) {
                        unsetInvalidateStatus();
                    } else {
                        setInvalidateStatus((Integer)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case KEY:
                    return getKey();

                case OWNER:
                    return getOwner();

                case INIT_STATUS:
                    return Integer.valueOf(getInitStatus());

                case INVALIDATE_STATUS:
                    return Integer.valueOf(getInvalidateStatus());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case KEY:
                    return isSetKey();
                case OWNER:
                    return isSetOwner();
                case INIT_STATUS:
                    return isSetInitStatus();
                case INVALIDATE_STATUS:
                    return isSetInvalidateStatus();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof create_args)
                return this.equals((create_args)that);
            return false;
        }

        public boolean equals(create_args that) {
            if (that == null)
                return false;

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            boolean this_present_owner = true && this.isSetOwner();
            boolean that_present_owner = true && that.isSetOwner();
            if (this_present_owner || that_present_owner) {
                if (!(this_present_owner && that_present_owner))
                    return false;
                if (!this.owner.equals(that.owner))
                    return false;
            }

            boolean this_present_initStatus = true;
            boolean that_present_initStatus = true;
            if (this_present_initStatus || that_present_initStatus) {
                if (!(this_present_initStatus && that_present_initStatus))
                    return false;
                if (this.initStatus != that.initStatus)
                    return false;
            }

            boolean this_present_invalidateStatus = true;
            boolean that_present_invalidateStatus = true;
            if (this_present_invalidateStatus || that_present_invalidateStatus) {
                if (!(this_present_invalidateStatus && that_present_invalidateStatus))
                    return false;
                if (this.invalidateStatus != that.invalidateStatus)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(create_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            create_args typedOther = (create_args)other;

            lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetOwner()).compareTo(typedOther.isSetOwner());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOwner()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetInitStatus()).compareTo(typedOther.isSetInitStatus());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetInitStatus()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initStatus, typedOther.initStatus);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetInvalidateStatus()).compareTo(typedOther.isSetInvalidateStatus());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetInvalidateStatus()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidateStatus, typedOther.invalidateStatus);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("create_args(");
            boolean first = true;

            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("owner:");
            if (this.owner == null) {
                sb.append("null");
            } else {
                sb.append(this.owner);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("initStatus:");
            sb.append(this.initStatus);
            first = false;
            if (!first) sb.append(", ");
            sb.append("invalidateStatus:");
            sb.append(this.invalidateStatus);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bit_vector = new BitSet(1);
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class create_argsStandardSchemeFactory implements SchemeFactory {
            public create_argsStandardScheme getScheme() {
                return new create_argsStandardScheme();
            }
        }

        private static class create_argsStandardScheme extends StandardScheme<create_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, create_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // KEY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.key = iprot.readString();
                                struct.setKeyIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // OWNER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.owner = iprot.readString();
                                struct.setOwnerIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // INIT_STATUS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.initStatus = iprot.readI32();
                                struct.setInitStatusIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // INVALIDATE_STATUS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.invalidateStatus = iprot.readI32();
                                struct.setInvalidateStatusIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, create_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                if (struct.owner != null) {
                    oprot.writeFieldBegin(OWNER_FIELD_DESC);
                    oprot.writeString(struct.owner);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(INIT_STATUS_FIELD_DESC);
                oprot.writeI32(struct.initStatus);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(INVALIDATE_STATUS_FIELD_DESC);
                oprot.writeI32(struct.invalidateStatus);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class create_argsTupleSchemeFactory implements SchemeFactory {
            public create_argsTupleScheme getScheme() {
                return new create_argsTupleScheme();
            }
        }

        private static class create_argsTupleScheme extends TupleScheme<create_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, create_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetKey()) {
                    optionals.set(0);
                }
                if (struct.isSetOwner()) {
                    optionals.set(1);
                }
                if (struct.isSetInitStatus()) {
                    optionals.set(2);
                }
                if (struct.isSetInvalidateStatus()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
                if (struct.isSetOwner()) {
                    oprot.writeString(struct.owner);
                }
                if (struct.isSetInitStatus()) {
                    oprot.writeI32(struct.initStatus);
                }
                if (struct.isSetInvalidateStatus()) {
                    oprot.writeI32(struct.invalidateStatus);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, create_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.owner = iprot.readString();
                    struct.setOwnerIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.initStatus = iprot.readI32();
                    struct.setInitStatusIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.invalidateStatus = iprot.readI32();
                    struct.setInvalidateStatusIsSet(true);
                }
            }
        }

    }

    public static class create_result implements org.apache.thrift.TBase<create_result, create_result._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_result");

        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new create_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new create_resultTupleSchemeFactory());
        }

        public RetryException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            E((short)1, "e");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_result.class, metaDataMap);
        }

        public create_result() {
        }

        public create_result(
                RetryException e)
        {
            this();
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public create_result(create_result other) {
            if (other.isSetE()) {
                this.e = new RetryException(other.e);
            }
        }

        public create_result deepCopy() {
            return new create_result(this);
        }

        @Override
        public void clear() {
            this.e = null;
        }

        public RetryException getE() {
            return this.e;
        }

        public create_result setE(RetryException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((RetryException)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case E:
                    return getE();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case E:
                    return isSetE();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof create_result)
                return this.equals((create_result)that);
            return false;
        }

        public boolean equals(create_result that) {
            if (that == null)
                return false;

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(create_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            create_result typedOther = (create_result)other;

            lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("create_result(");
            boolean first = true;

            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class create_resultStandardSchemeFactory implements SchemeFactory {
            public create_resultStandardScheme getScheme() {
                return new create_resultStandardScheme();
            }
        }

        private static class create_resultStandardScheme extends StandardScheme<create_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, create_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new RetryException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, create_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class create_resultTupleSchemeFactory implements SchemeFactory {
            public create_resultTupleScheme getScheme() {
                return new create_resultTupleScheme();
            }
        }

        private static class create_resultTupleScheme extends TupleScheme<create_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, create_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetE()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, create_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.e = new RetryException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

    }

    public static class updateStatus_args implements org.apache.thrift.TBase<updateStatus_args, updateStatus_args._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatus_args");

        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField EXPECT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("expectStatus", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField NEW_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("newStatus", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)4);
        private static final org.apache.thrift.protocol.TField LEASE_FIELD_DESC = new org.apache.thrift.protocol.TField("lease", org.apache.thrift.protocol.TType.I32, (short)5);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new updateStatus_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new updateStatus_argsTupleSchemeFactory());
        }

        public String key; // required
        public int expectStatus; // required
        public int newStatus; // required
        public String owner; // required
        public int lease; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            KEY((short)1, "key"),
            EXPECT_STATUS((short)2, "expectStatus"),
            NEW_STATUS((short)3, "newStatus"),
            OWNER((short)4, "owner"),
            LEASE((short)5, "lease");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // KEY
                        return KEY;
                    case 2: // EXPECT_STATUS
                        return EXPECT_STATUS;
                    case 3: // NEW_STATUS
                        return NEW_STATUS;
                    case 4: // OWNER
                        return OWNER;
                    case 5: // LEASE
                        return LEASE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __EXPECTSTATUS_ISSET_ID = 0;
        private static final int __NEWSTATUS_ISSET_ID = 1;
        private static final int __LEASE_ISSET_ID = 2;
        private BitSet __isset_bit_vector = new BitSet(3);
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.EXPECT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("expectStatus", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.NEW_STATUS, new org.apache.thrift.meta_data.FieldMetaData("newStatus", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.LEASE, new org.apache.thrift.meta_data.FieldMetaData("lease", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatus_args.class, metaDataMap);
        }

        public updateStatus_args() {
        }

        public updateStatus_args(
                String key,
                int expectStatus,
                int newStatus,
                String owner,
                int lease)
        {
            this();
            this.key = key;
            this.expectStatus = expectStatus;
            setExpectStatusIsSet(true);
            this.newStatus = newStatus;
            setNewStatusIsSet(true);
            this.owner = owner;
            this.lease = lease;
            setLeaseIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateStatus_args(updateStatus_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            if (other.isSetKey()) {
                this.key = other.key;
            }
            this.expectStatus = other.expectStatus;
            this.newStatus = other.newStatus;
            if (other.isSetOwner()) {
                this.owner = other.owner;
            }
            this.lease = other.lease;
        }

        public updateStatus_args deepCopy() {
            return new updateStatus_args(this);
        }

        @Override
        public void clear() {
            this.key = null;
            setExpectStatusIsSet(false);
            this.expectStatus = 0;
            setNewStatusIsSet(false);
            this.newStatus = 0;
            this.owner = null;
            setLeaseIsSet(false);
            this.lease = 0;
        }

        public String getKey() {
            return this.key;
        }

        public updateStatus_args setKey(String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /** Returns true if field key is set (has been assigned a value) and false otherwise */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        public int getExpectStatus() {
            return this.expectStatus;
        }

        public updateStatus_args setExpectStatus(int expectStatus) {
            this.expectStatus = expectStatus;
            setExpectStatusIsSet(true);
            return this;
        }

        public void unsetExpectStatus() {
            __isset_bit_vector.clear(__EXPECTSTATUS_ISSET_ID);
        }

        /** Returns true if field expectStatus is set (has been assigned a value) and false otherwise */
        public boolean isSetExpectStatus() {
            return __isset_bit_vector.get(__EXPECTSTATUS_ISSET_ID);
        }

        public void setExpectStatusIsSet(boolean value) {
            __isset_bit_vector.set(__EXPECTSTATUS_ISSET_ID, value);
        }

        public int getNewStatus() {
            return this.newStatus;
        }

        public updateStatus_args setNewStatus(int newStatus) {
            this.newStatus = newStatus;
            setNewStatusIsSet(true);
            return this;
        }

        public void unsetNewStatus() {
            __isset_bit_vector.clear(__NEWSTATUS_ISSET_ID);
        }

        /** Returns true if field newStatus is set (has been assigned a value) and false otherwise */
        public boolean isSetNewStatus() {
            return __isset_bit_vector.get(__NEWSTATUS_ISSET_ID);
        }

        public void setNewStatusIsSet(boolean value) {
            __isset_bit_vector.set(__NEWSTATUS_ISSET_ID, value);
        }

        public String getOwner() {
            return this.owner;
        }

        public updateStatus_args setOwner(String owner) {
            this.owner = owner;
            return this;
        }

        public void unsetOwner() {
            this.owner = null;
        }

        /** Returns true if field owner is set (has been assigned a value) and false otherwise */
        public boolean isSetOwner() {
            return this.owner != null;
        }

        public void setOwnerIsSet(boolean value) {
            if (!value) {
                this.owner = null;
            }
        }

        public int getLease() {
            return this.lease;
        }

        public updateStatus_args setLease(int lease) {
            this.lease = lease;
            setLeaseIsSet(true);
            return this;
        }

        public void unsetLease() {
            __isset_bit_vector.clear(__LEASE_ISSET_ID);
        }

        /** Returns true if field lease is set (has been assigned a value) and false otherwise */
        public boolean isSetLease() {
            return __isset_bit_vector.get(__LEASE_ISSET_ID);
        }

        public void setLeaseIsSet(boolean value) {
            __isset_bit_vector.set(__LEASE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case KEY:
                    if (value == null) {
                        unsetKey();
                    } else {
                        setKey((String)value);
                    }
                    break;

                case EXPECT_STATUS:
                    if (value == null) {
                        unsetExpectStatus();
                    } else {
                        setExpectStatus((Integer)value);
                    }
                    break;

                case NEW_STATUS:
                    if (value == null) {
                        unsetNewStatus();
                    } else {
                        setNewStatus((Integer)value);
                    }
                    break;

                case OWNER:
                    if (value == null) {
                        unsetOwner();
                    } else {
                        setOwner((String)value);
                    }
                    break;

                case LEASE:
                    if (value == null) {
                        unsetLease();
                    } else {
                        setLease((Integer)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case KEY:
                    return getKey();

                case EXPECT_STATUS:
                    return Integer.valueOf(getExpectStatus());

                case NEW_STATUS:
                    return Integer.valueOf(getNewStatus());

                case OWNER:
                    return getOwner();

                case LEASE:
                    return Integer.valueOf(getLease());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case KEY:
                    return isSetKey();
                case EXPECT_STATUS:
                    return isSetExpectStatus();
                case NEW_STATUS:
                    return isSetNewStatus();
                case OWNER:
                    return isSetOwner();
                case LEASE:
                    return isSetLease();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof updateStatus_args)
                return this.equals((updateStatus_args)that);
            return false;
        }

        public boolean equals(updateStatus_args that) {
            if (that == null)
                return false;

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            boolean this_present_expectStatus = true;
            boolean that_present_expectStatus = true;
            if (this_present_expectStatus || that_present_expectStatus) {
                if (!(this_present_expectStatus && that_present_expectStatus))
                    return false;
                if (this.expectStatus != that.expectStatus)
                    return false;
            }

            boolean this_present_newStatus = true;
            boolean that_present_newStatus = true;
            if (this_present_newStatus || that_present_newStatus) {
                if (!(this_present_newStatus && that_present_newStatus))
                    return false;
                if (this.newStatus != that.newStatus)
                    return false;
            }

            boolean this_present_owner = true && this.isSetOwner();
            boolean that_present_owner = true && that.isSetOwner();
            if (this_present_owner || that_present_owner) {
                if (!(this_present_owner && that_present_owner))
                    return false;
                if (!this.owner.equals(that.owner))
                    return false;
            }

            boolean this_present_lease = true;
            boolean that_present_lease = true;
            if (this_present_lease || that_present_lease) {
                if (!(this_present_lease && that_present_lease))
                    return false;
                if (this.lease != that.lease)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(updateStatus_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            updateStatus_args typedOther = (updateStatus_args)other;

            lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetExpectStatus()).compareTo(typedOther.isSetExpectStatus());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetExpectStatus()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectStatus, typedOther.expectStatus);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetNewStatus()).compareTo(typedOther.isSetNewStatus());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNewStatus()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newStatus, typedOther.newStatus);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetOwner()).compareTo(typedOther.isSetOwner());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOwner()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetLease()).compareTo(typedOther.isSetLease());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLease()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lease, typedOther.lease);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("updateStatus_args(");
            boolean first = true;

            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("expectStatus:");
            sb.append(this.expectStatus);
            first = false;
            if (!first) sb.append(", ");
            sb.append("newStatus:");
            sb.append(this.newStatus);
            first = false;
            if (!first) sb.append(", ");
            sb.append("owner:");
            if (this.owner == null) {
                sb.append("null");
            } else {
                sb.append(this.owner);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("lease:");
            sb.append(this.lease);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bit_vector = new BitSet(1);
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateStatus_argsStandardSchemeFactory implements SchemeFactory {
            public updateStatus_argsStandardScheme getScheme() {
                return new updateStatus_argsStandardScheme();
            }
        }

        private static class updateStatus_argsStandardScheme extends StandardScheme<updateStatus_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // KEY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.key = iprot.readString();
                                struct.setKeyIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // EXPECT_STATUS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.expectStatus = iprot.readI32();
                                struct.setExpectStatusIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // NEW_STATUS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.newStatus = iprot.readI32();
                                struct.setNewStatusIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // OWNER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.owner = iprot.readString();
                                struct.setOwnerIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // LEASE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.lease = iprot.readI32();
                                struct.setLeaseIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatus_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(EXPECT_STATUS_FIELD_DESC);
                oprot.writeI32(struct.expectStatus);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(NEW_STATUS_FIELD_DESC);
                oprot.writeI32(struct.newStatus);
                oprot.writeFieldEnd();
                if (struct.owner != null) {
                    oprot.writeFieldBegin(OWNER_FIELD_DESC);
                    oprot.writeString(struct.owner);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(LEASE_FIELD_DESC);
                oprot.writeI32(struct.lease);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateStatus_argsTupleSchemeFactory implements SchemeFactory {
            public updateStatus_argsTupleScheme getScheme() {
                return new updateStatus_argsTupleScheme();
            }
        }

        private static class updateStatus_argsTupleScheme extends TupleScheme<updateStatus_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateStatus_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetKey()) {
                    optionals.set(0);
                }
                if (struct.isSetExpectStatus()) {
                    optionals.set(1);
                }
                if (struct.isSetNewStatus()) {
                    optionals.set(2);
                }
                if (struct.isSetOwner()) {
                    optionals.set(3);
                }
                if (struct.isSetLease()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
                if (struct.isSetExpectStatus()) {
                    oprot.writeI32(struct.expectStatus);
                }
                if (struct.isSetNewStatus()) {
                    oprot.writeI32(struct.newStatus);
                }
                if (struct.isSetOwner()) {
                    oprot.writeString(struct.owner);
                }
                if (struct.isSetLease()) {
                    oprot.writeI32(struct.lease);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateStatus_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.expectStatus = iprot.readI32();
                    struct.setExpectStatusIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.newStatus = iprot.readI32();
                    struct.setNewStatusIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.owner = iprot.readString();
                    struct.setOwnerIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.lease = iprot.readI32();
                    struct.setLeaseIsSet(true);
                }
            }
        }

    }

    public static class updateStatus_result implements org.apache.thrift.TBase<updateStatus_result, updateStatus_result._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatus_result");

        private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);
        private static final org.apache.thrift.protocol.TField SE_FIELD_DESC = new org.apache.thrift.protocol.TField("se", org.apache.thrift.protocol.TType.STRUCT, (short)2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new updateStatus_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new updateStatus_resultTupleSchemeFactory());
        }

        public RetryException re; // required
        public StateCASException se; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            RE((short)1, "re"),
            SE((short)2, "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // RE
                        return RE;
                    case 2: // SE
                        return SE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            tmpMap.put(_Fields.SE, new org.apache.thrift.meta_data.FieldMetaData("se", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatus_result.class, metaDataMap);
        }

        public updateStatus_result() {
        }

        public updateStatus_result(
                RetryException re,
                StateCASException se)
        {
            this();
            this.re = re;
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateStatus_result(updateStatus_result other) {
            if (other.isSetRe()) {
                this.re = new RetryException(other.re);
            }
            if (other.isSetSe()) {
                this.se = new StateCASException(other.se);
            }
        }

        public updateStatus_result deepCopy() {
            return new updateStatus_result(this);
        }

        @Override
        public void clear() {
            this.re = null;
            this.se = null;
        }

        public RetryException getRe() {
            return this.re;
        }

        public updateStatus_result setRe(RetryException re) {
            this.re = re;
            return this;
        }

        public void unsetRe() {
            this.re = null;
        }

        /** Returns true if field re is set (has been assigned a value) and false otherwise */
        public boolean isSetRe() {
            return this.re != null;
        }

        public void setReIsSet(boolean value) {
            if (!value) {
                this.re = null;
            }
        }

        public StateCASException getSe() {
            return this.se;
        }

        public updateStatus_result setSe(StateCASException se) {
            this.se = se;
            return this;
        }

        public void unsetSe() {
            this.se = null;
        }

        /** Returns true if field se is set (has been assigned a value) and false otherwise */
        public boolean isSetSe() {
            return this.se != null;
        }

        public void setSeIsSet(boolean value) {
            if (!value) {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case RE:
                    if (value == null) {
                        unsetRe();
                    } else {
                        setRe((RetryException)value);
                    }
                    break;

                case SE:
                    if (value == null) {
                        unsetSe();
                    } else {
                        setSe((StateCASException)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case RE:
                    return getRe();

                case SE:
                    return getSe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case RE:
                    return isSetRe();
                case SE:
                    return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof updateStatus_result)
                return this.equals((updateStatus_result)that);
            return false;
        }

        public boolean equals(updateStatus_result that) {
            if (that == null)
                return false;

            boolean this_present_re = true && this.isSetRe();
            boolean that_present_re = true && that.isSetRe();
            if (this_present_re || that_present_re) {
                if (!(this_present_re && that_present_re))
                    return false;
                if (!this.re.equals(that.re))
                    return false;
            }

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se) {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(updateStatus_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            updateStatus_result typedOther = (updateStatus_result)other;

            lastComparison = Boolean.valueOf(isSetRe()).compareTo(typedOther.isSetRe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRe()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, typedOther.re);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSe()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.se, typedOther.se);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("updateStatus_result(");
            boolean first = true;

            sb.append("re:");
            if (this.re == null) {
                sb.append("null");
            } else {
                sb.append(this.re);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("se:");
            if (this.se == null) {
                sb.append("null");
            } else {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateStatus_resultStandardSchemeFactory implements SchemeFactory {
            public updateStatus_resultStandardScheme getScheme() {
                return new updateStatus_resultStandardScheme();
            }
        }

        private static class updateStatus_resultStandardScheme extends StandardScheme<updateStatus_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // RE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.re = new RetryException();
                                struct.re.read(iprot);
                                struct.setReIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.se = new StateCASException();
                                struct.se.read(iprot);
                                struct.setSeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatus_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.re != null) {
                    oprot.writeFieldBegin(RE_FIELD_DESC);
                    struct.re.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.se != null) {
                    oprot.writeFieldBegin(SE_FIELD_DESC);
                    struct.se.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateStatus_resultTupleSchemeFactory implements SchemeFactory {
            public updateStatus_resultTupleScheme getScheme() {
                return new updateStatus_resultTupleScheme();
            }
        }

        private static class updateStatus_resultTupleScheme extends TupleScheme<updateStatus_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateStatus_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetRe()) {
                    optionals.set(0);
                }
                if (struct.isSetSe()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetRe()) {
                    struct.re.write(oprot);
                }
                if (struct.isSetSe()) {
                    struct.se.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateStatus_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.re = new RetryException();
                    struct.re.read(iprot);
                    struct.setReIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.se = new StateCASException();
                    struct.se.read(iprot);
                    struct.setSeIsSet(true);
                }
            }
        }

    }

    public static class updateLease_args implements org.apache.thrift.TBase<updateLease_args, updateLease_args._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLease_args");

        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField EXPECT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("expectStatus", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)3);
        private static final org.apache.thrift.protocol.TField LEASE_FIELD_DESC = new org.apache.thrift.protocol.TField("lease", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new updateLease_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new updateLease_argsTupleSchemeFactory());
        }

        public String key; // required
        public int expectStatus; // required
        public String owner; // required
        public int lease; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            KEY((short)1, "key"),
            EXPECT_STATUS((short)2, "expectStatus"),
            OWNER((short)3, "owner"),
            LEASE((short)4, "lease");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // KEY
                        return KEY;
                    case 2: // EXPECT_STATUS
                        return EXPECT_STATUS;
                    case 3: // OWNER
                        return OWNER;
                    case 4: // LEASE
                        return LEASE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __EXPECTSTATUS_ISSET_ID = 0;
        private static final int __LEASE_ISSET_ID = 1;
        private BitSet __isset_bit_vector = new BitSet(2);
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.EXPECT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("expectStatus", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.LEASE, new org.apache.thrift.meta_data.FieldMetaData("lease", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLease_args.class, metaDataMap);
        }

        public updateLease_args() {
        }

        public updateLease_args(
                String key,
                int expectStatus,
                String owner,
                int lease)
        {
            this();
            this.key = key;
            this.expectStatus = expectStatus;
            setExpectStatusIsSet(true);
            this.owner = owner;
            this.lease = lease;
            setLeaseIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateLease_args(updateLease_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            if (other.isSetKey()) {
                this.key = other.key;
            }
            this.expectStatus = other.expectStatus;
            if (other.isSetOwner()) {
                this.owner = other.owner;
            }
            this.lease = other.lease;
        }

        public updateLease_args deepCopy() {
            return new updateLease_args(this);
        }

        @Override
        public void clear() {
            this.key = null;
            setExpectStatusIsSet(false);
            this.expectStatus = 0;
            this.owner = null;
            setLeaseIsSet(false);
            this.lease = 0;
        }

        public String getKey() {
            return this.key;
        }

        public updateLease_args setKey(String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /** Returns true if field key is set (has been assigned a value) and false otherwise */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        public int getExpectStatus() {
            return this.expectStatus;
        }

        public updateLease_args setExpectStatus(int expectStatus) {
            this.expectStatus = expectStatus;
            setExpectStatusIsSet(true);
            return this;
        }

        public void unsetExpectStatus() {
            __isset_bit_vector.clear(__EXPECTSTATUS_ISSET_ID);
        }

        /** Returns true if field expectStatus is set (has been assigned a value) and false otherwise */
        public boolean isSetExpectStatus() {
            return __isset_bit_vector.get(__EXPECTSTATUS_ISSET_ID);
        }

        public void setExpectStatusIsSet(boolean value) {
            __isset_bit_vector.set(__EXPECTSTATUS_ISSET_ID, value);
        }

        public String getOwner() {
            return this.owner;
        }

        public updateLease_args setOwner(String owner) {
            this.owner = owner;
            return this;
        }

        public void unsetOwner() {
            this.owner = null;
        }

        /** Returns true if field owner is set (has been assigned a value) and false otherwise */
        public boolean isSetOwner() {
            return this.owner != null;
        }

        public void setOwnerIsSet(boolean value) {
            if (!value) {
                this.owner = null;
            }
        }

        public int getLease() {
            return this.lease;
        }

        public updateLease_args setLease(int lease) {
            this.lease = lease;
            setLeaseIsSet(true);
            return this;
        }

        public void unsetLease() {
            __isset_bit_vector.clear(__LEASE_ISSET_ID);
        }

        /** Returns true if field lease is set (has been assigned a value) and false otherwise */
        public boolean isSetLease() {
            return __isset_bit_vector.get(__LEASE_ISSET_ID);
        }

        public void setLeaseIsSet(boolean value) {
            __isset_bit_vector.set(__LEASE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case KEY:
                    if (value == null) {
                        unsetKey();
                    } else {
                        setKey((String)value);
                    }
                    break;

                case EXPECT_STATUS:
                    if (value == null) {
                        unsetExpectStatus();
                    } else {
                        setExpectStatus((Integer)value);
                    }
                    break;

                case OWNER:
                    if (value == null) {
                        unsetOwner();
                    } else {
                        setOwner((String)value);
                    }
                    break;

                case LEASE:
                    if (value == null) {
                        unsetLease();
                    } else {
                        setLease((Integer)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case KEY:
                    return getKey();

                case EXPECT_STATUS:
                    return Integer.valueOf(getExpectStatus());

                case OWNER:
                    return getOwner();

                case LEASE:
                    return Integer.valueOf(getLease());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case KEY:
                    return isSetKey();
                case EXPECT_STATUS:
                    return isSetExpectStatus();
                case OWNER:
                    return isSetOwner();
                case LEASE:
                    return isSetLease();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof updateLease_args)
                return this.equals((updateLease_args)that);
            return false;
        }

        public boolean equals(updateLease_args that) {
            if (that == null)
                return false;

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            boolean this_present_expectStatus = true;
            boolean that_present_expectStatus = true;
            if (this_present_expectStatus || that_present_expectStatus) {
                if (!(this_present_expectStatus && that_present_expectStatus))
                    return false;
                if (this.expectStatus != that.expectStatus)
                    return false;
            }

            boolean this_present_owner = true && this.isSetOwner();
            boolean that_present_owner = true && that.isSetOwner();
            if (this_present_owner || that_present_owner) {
                if (!(this_present_owner && that_present_owner))
                    return false;
                if (!this.owner.equals(that.owner))
                    return false;
            }

            boolean this_present_lease = true;
            boolean that_present_lease = true;
            if (this_present_lease || that_present_lease) {
                if (!(this_present_lease && that_present_lease))
                    return false;
                if (this.lease != that.lease)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(updateLease_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            updateLease_args typedOther = (updateLease_args)other;

            lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetExpectStatus()).compareTo(typedOther.isSetExpectStatus());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetExpectStatus()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectStatus, typedOther.expectStatus);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetOwner()).compareTo(typedOther.isSetOwner());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOwner()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetLease()).compareTo(typedOther.isSetLease());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLease()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lease, typedOther.lease);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("updateLease_args(");
            boolean first = true;

            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("expectStatus:");
            sb.append(this.expectStatus);
            first = false;
            if (!first) sb.append(", ");
            sb.append("owner:");
            if (this.owner == null) {
                sb.append("null");
            } else {
                sb.append(this.owner);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("lease:");
            sb.append(this.lease);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bit_vector = new BitSet(1);
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateLease_argsStandardSchemeFactory implements SchemeFactory {
            public updateLease_argsStandardScheme getScheme() {
                return new updateLease_argsStandardScheme();
            }
        }

        private static class updateLease_argsStandardScheme extends StandardScheme<updateLease_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateLease_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // KEY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.key = iprot.readString();
                                struct.setKeyIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // EXPECT_STATUS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.expectStatus = iprot.readI32();
                                struct.setExpectStatusIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // OWNER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.owner = iprot.readString();
                                struct.setOwnerIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // LEASE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.lease = iprot.readI32();
                                struct.setLeaseIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateLease_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(EXPECT_STATUS_FIELD_DESC);
                oprot.writeI32(struct.expectStatus);
                oprot.writeFieldEnd();
                if (struct.owner != null) {
                    oprot.writeFieldBegin(OWNER_FIELD_DESC);
                    oprot.writeString(struct.owner);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(LEASE_FIELD_DESC);
                oprot.writeI32(struct.lease);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateLease_argsTupleSchemeFactory implements SchemeFactory {
            public updateLease_argsTupleScheme getScheme() {
                return new updateLease_argsTupleScheme();
            }
        }

        private static class updateLease_argsTupleScheme extends TupleScheme<updateLease_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateLease_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetKey()) {
                    optionals.set(0);
                }
                if (struct.isSetExpectStatus()) {
                    optionals.set(1);
                }
                if (struct.isSetOwner()) {
                    optionals.set(2);
                }
                if (struct.isSetLease()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
                if (struct.isSetExpectStatus()) {
                    oprot.writeI32(struct.expectStatus);
                }
                if (struct.isSetOwner()) {
                    oprot.writeString(struct.owner);
                }
                if (struct.isSetLease()) {
                    oprot.writeI32(struct.lease);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateLease_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.expectStatus = iprot.readI32();
                    struct.setExpectStatusIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.owner = iprot.readString();
                    struct.setOwnerIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.lease = iprot.readI32();
                    struct.setLeaseIsSet(true);
                }
            }
        }

    }

    public static class updateLease_result implements org.apache.thrift.TBase<updateLease_result, updateLease_result._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLease_result");

        private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);
        private static final org.apache.thrift.protocol.TField SE_FIELD_DESC = new org.apache.thrift.protocol.TField("se", org.apache.thrift.protocol.TType.STRUCT, (short)2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new updateLease_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new updateLease_resultTupleSchemeFactory());
        }

        public RetryException re; // required
        public StateCASException se; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            RE((short)1, "re"),
            SE((short)2, "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // RE
                        return RE;
                    case 2: // SE
                        return SE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            tmpMap.put(_Fields.SE, new org.apache.thrift.meta_data.FieldMetaData("se", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLease_result.class, metaDataMap);
        }

        public updateLease_result() {
        }

        public updateLease_result(
                RetryException re,
                StateCASException se)
        {
            this();
            this.re = re;
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateLease_result(updateLease_result other) {
            if (other.isSetRe()) {
                this.re = new RetryException(other.re);
            }
            if (other.isSetSe()) {
                this.se = new StateCASException(other.se);
            }
        }

        public updateLease_result deepCopy() {
            return new updateLease_result(this);
        }

        @Override
        public void clear() {
            this.re = null;
            this.se = null;
        }

        public RetryException getRe() {
            return this.re;
        }

        public updateLease_result setRe(RetryException re) {
            this.re = re;
            return this;
        }

        public void unsetRe() {
            this.re = null;
        }

        /** Returns true if field re is set (has been assigned a value) and false otherwise */
        public boolean isSetRe() {
            return this.re != null;
        }

        public void setReIsSet(boolean value) {
            if (!value) {
                this.re = null;
            }
        }

        public StateCASException getSe() {
            return this.se;
        }

        public updateLease_result setSe(StateCASException se) {
            this.se = se;
            return this;
        }

        public void unsetSe() {
            this.se = null;
        }

        /** Returns true if field se is set (has been assigned a value) and false otherwise */
        public boolean isSetSe() {
            return this.se != null;
        }

        public void setSeIsSet(boolean value) {
            if (!value) {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case RE:
                    if (value == null) {
                        unsetRe();
                    } else {
                        setRe((RetryException)value);
                    }
                    break;

                case SE:
                    if (value == null) {
                        unsetSe();
                    } else {
                        setSe((StateCASException)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case RE:
                    return getRe();

                case SE:
                    return getSe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case RE:
                    return isSetRe();
                case SE:
                    return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof updateLease_result)
                return this.equals((updateLease_result)that);
            return false;
        }

        public boolean equals(updateLease_result that) {
            if (that == null)
                return false;

            boolean this_present_re = true && this.isSetRe();
            boolean that_present_re = true && that.isSetRe();
            if (this_present_re || that_present_re) {
                if (!(this_present_re && that_present_re))
                    return false;
                if (!this.re.equals(that.re))
                    return false;
            }

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se) {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(updateLease_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            updateLease_result typedOther = (updateLease_result)other;

            lastComparison = Boolean.valueOf(isSetRe()).compareTo(typedOther.isSetRe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRe()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, typedOther.re);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSe()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.se, typedOther.se);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("updateLease_result(");
            boolean first = true;

            sb.append("re:");
            if (this.re == null) {
                sb.append("null");
            } else {
                sb.append(this.re);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("se:");
            if (this.se == null) {
                sb.append("null");
            } else {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateLease_resultStandardSchemeFactory implements SchemeFactory {
            public updateLease_resultStandardScheme getScheme() {
                return new updateLease_resultStandardScheme();
            }
        }

        private static class updateLease_resultStandardScheme extends StandardScheme<updateLease_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateLease_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // RE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.re = new RetryException();
                                struct.re.read(iprot);
                                struct.setReIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.se = new StateCASException();
                                struct.se.read(iprot);
                                struct.setSeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateLease_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.re != null) {
                    oprot.writeFieldBegin(RE_FIELD_DESC);
                    struct.re.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.se != null) {
                    oprot.writeFieldBegin(SE_FIELD_DESC);
                    struct.se.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateLease_resultTupleSchemeFactory implements SchemeFactory {
            public updateLease_resultTupleScheme getScheme() {
                return new updateLease_resultTupleScheme();
            }
        }

        private static class updateLease_resultTupleScheme extends TupleScheme<updateLease_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateLease_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetRe()) {
                    optionals.set(0);
                }
                if (struct.isSetSe()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetRe()) {
                    struct.re.write(oprot);
                }
                if (struct.isSetSe()) {
                    struct.se.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateLease_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.re = new RetryException();
                    struct.re.read(iprot);
                    struct.setReIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.se = new StateCASException();
                    struct.se.read(iprot);
                    struct.setSeIsSet(true);
                }
            }
        }

    }

    public static class watch_args implements org.apache.thrift.TBase<watch_args, watch_args._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("watch_args");

        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField EXPECT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("expectStatus", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new watch_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new watch_argsTupleSchemeFactory());
        }

        public String key; // required
        public int expectStatus; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            KEY((short)1, "key"),
            EXPECT_STATUS((short)2, "expectStatus");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // KEY
                        return KEY;
                    case 2: // EXPECT_STATUS
                        return EXPECT_STATUS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __EXPECTSTATUS_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.EXPECT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("expectStatus", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(watch_args.class, metaDataMap);
        }

        public watch_args() {
        }

        public watch_args(
                String key,
                int expectStatus)
        {
            this();
            this.key = key;
            this.expectStatus = expectStatus;
            setExpectStatusIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public watch_args(watch_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            if (other.isSetKey()) {
                this.key = other.key;
            }
            this.expectStatus = other.expectStatus;
        }

        public watch_args deepCopy() {
            return new watch_args(this);
        }

        @Override
        public void clear() {
            this.key = null;
            setExpectStatusIsSet(false);
            this.expectStatus = 0;
        }

        public String getKey() {
            return this.key;
        }

        public watch_args setKey(String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /** Returns true if field key is set (has been assigned a value) and false otherwise */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        public int getExpectStatus() {
            return this.expectStatus;
        }

        public watch_args setExpectStatus(int expectStatus) {
            this.expectStatus = expectStatus;
            setExpectStatusIsSet(true);
            return this;
        }

        public void unsetExpectStatus() {
            __isset_bit_vector.clear(__EXPECTSTATUS_ISSET_ID);
        }

        /** Returns true if field expectStatus is set (has been assigned a value) and false otherwise */
        public boolean isSetExpectStatus() {
            return __isset_bit_vector.get(__EXPECTSTATUS_ISSET_ID);
        }

        public void setExpectStatusIsSet(boolean value) {
            __isset_bit_vector.set(__EXPECTSTATUS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case KEY:
                    if (value == null) {
                        unsetKey();
                    } else {
                        setKey((String)value);
                    }
                    break;

                case EXPECT_STATUS:
                    if (value == null) {
                        unsetExpectStatus();
                    } else {
                        setExpectStatus((Integer)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case KEY:
                    return getKey();

                case EXPECT_STATUS:
                    return Integer.valueOf(getExpectStatus());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case KEY:
                    return isSetKey();
                case EXPECT_STATUS:
                    return isSetExpectStatus();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof watch_args)
                return this.equals((watch_args)that);
            return false;
        }

        public boolean equals(watch_args that) {
            if (that == null)
                return false;

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            boolean this_present_expectStatus = true;
            boolean that_present_expectStatus = true;
            if (this_present_expectStatus || that_present_expectStatus) {
                if (!(this_present_expectStatus && that_present_expectStatus))
                    return false;
                if (this.expectStatus != that.expectStatus)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(watch_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            watch_args typedOther = (watch_args)other;

            lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetExpectStatus()).compareTo(typedOther.isSetExpectStatus());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetExpectStatus()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectStatus, typedOther.expectStatus);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("watch_args(");
            boolean first = true;

            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("expectStatus:");
            sb.append(this.expectStatus);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bit_vector = new BitSet(1);
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class watch_argsStandardSchemeFactory implements SchemeFactory {
            public watch_argsStandardScheme getScheme() {
                return new watch_argsStandardScheme();
            }
        }

        private static class watch_argsStandardScheme extends StandardScheme<watch_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, watch_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // KEY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.key = iprot.readString();
                                struct.setKeyIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // EXPECT_STATUS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.expectStatus = iprot.readI32();
                                struct.setExpectStatusIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, watch_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(EXPECT_STATUS_FIELD_DESC);
                oprot.writeI32(struct.expectStatus);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class watch_argsTupleSchemeFactory implements SchemeFactory {
            public watch_argsTupleScheme getScheme() {
                return new watch_argsTupleScheme();
            }
        }

        private static class watch_argsTupleScheme extends TupleScheme<watch_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, watch_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetKey()) {
                    optionals.set(0);
                }
                if (struct.isSetExpectStatus()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
                if (struct.isSetExpectStatus()) {
                    oprot.writeI32(struct.expectStatus);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, watch_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.expectStatus = iprot.readI32();
                    struct.setExpectStatusIsSet(true);
                }
            }
        }

    }

    public static class watch_result implements org.apache.thrift.TBase<watch_result, watch_result._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("watch_result");

        private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);
        private static final org.apache.thrift.protocol.TField ESE_FIELD_DESC = new org.apache.thrift.protocol.TField("ese", org.apache.thrift.protocol.TType.STRUCT, (short)2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new watch_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new watch_resultTupleSchemeFactory());
        }

        public RetryException re; // required
        public ExpectStatusException ese; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            RE((short)1, "re"),
            ESE((short)2, "ese");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // RE
                        return RE;
                    case 2: // ESE
                        return ESE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            tmpMap.put(_Fields.ESE, new org.apache.thrift.meta_data.FieldMetaData("ese", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(watch_result.class, metaDataMap);
        }

        public watch_result() {
        }

        public watch_result(
                RetryException re,
                ExpectStatusException ese)
        {
            this();
            this.re = re;
            this.ese = ese;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public watch_result(watch_result other) {
            if (other.isSetRe()) {
                this.re = new RetryException(other.re);
            }
            if (other.isSetEse()) {
                this.ese = new ExpectStatusException(other.ese);
            }
        }

        public watch_result deepCopy() {
            return new watch_result(this);
        }

        @Override
        public void clear() {
            this.re = null;
            this.ese = null;
        }

        public RetryException getRe() {
            return this.re;
        }

        public watch_result setRe(RetryException re) {
            this.re = re;
            return this;
        }

        public void unsetRe() {
            this.re = null;
        }

        /** Returns true if field re is set (has been assigned a value) and false otherwise */
        public boolean isSetRe() {
            return this.re != null;
        }

        public void setReIsSet(boolean value) {
            if (!value) {
                this.re = null;
            }
        }

        public ExpectStatusException getEse() {
            return this.ese;
        }

        public watch_result setEse(ExpectStatusException ese) {
            this.ese = ese;
            return this;
        }

        public void unsetEse() {
            this.ese = null;
        }

        /** Returns true if field ese is set (has been assigned a value) and false otherwise */
        public boolean isSetEse() {
            return this.ese != null;
        }

        public void setEseIsSet(boolean value) {
            if (!value) {
                this.ese = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case RE:
                    if (value == null) {
                        unsetRe();
                    } else {
                        setRe((RetryException)value);
                    }
                    break;

                case ESE:
                    if (value == null) {
                        unsetEse();
                    } else {
                        setEse((ExpectStatusException)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case RE:
                    return getRe();

                case ESE:
                    return getEse();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case RE:
                    return isSetRe();
                case ESE:
                    return isSetEse();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof watch_result)
                return this.equals((watch_result)that);
            return false;
        }

        public boolean equals(watch_result that) {
            if (that == null)
                return false;

            boolean this_present_re = true && this.isSetRe();
            boolean that_present_re = true && that.isSetRe();
            if (this_present_re || that_present_re) {
                if (!(this_present_re && that_present_re))
                    return false;
                if (!this.re.equals(that.re))
                    return false;
            }

            boolean this_present_ese = true && this.isSetEse();
            boolean that_present_ese = true && that.isSetEse();
            if (this_present_ese || that_present_ese) {
                if (!(this_present_ese && that_present_ese))
                    return false;
                if (!this.ese.equals(that.ese))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(watch_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            watch_result typedOther = (watch_result)other;

            lastComparison = Boolean.valueOf(isSetRe()).compareTo(typedOther.isSetRe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRe()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, typedOther.re);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetEse()).compareTo(typedOther.isSetEse());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEse()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ese, typedOther.ese);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("watch_result(");
            boolean first = true;

            sb.append("re:");
            if (this.re == null) {
                sb.append("null");
            } else {
                sb.append(this.re);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ese:");
            if (this.ese == null) {
                sb.append("null");
            } else {
                sb.append(this.ese);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class watch_resultStandardSchemeFactory implements SchemeFactory {
            public watch_resultStandardScheme getScheme() {
                return new watch_resultStandardScheme();
            }
        }

        private static class watch_resultStandardScheme extends StandardScheme<watch_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, watch_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // RE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.re = new RetryException();
                                struct.re.read(iprot);
                                struct.setReIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ESE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ese = new ExpectStatusException();
                                struct.ese.read(iprot);
                                struct.setEseIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, watch_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.re != null) {
                    oprot.writeFieldBegin(RE_FIELD_DESC);
                    struct.re.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ese != null) {
                    oprot.writeFieldBegin(ESE_FIELD_DESC);
                    struct.ese.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class watch_resultTupleSchemeFactory implements SchemeFactory {
            public watch_resultTupleScheme getScheme() {
                return new watch_resultTupleScheme();
            }
        }

        private static class watch_resultTupleScheme extends TupleScheme<watch_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, watch_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetRe()) {
                    optionals.set(0);
                }
                if (struct.isSetEse()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetRe()) {
                    struct.re.write(oprot);
                }
                if (struct.isSetEse()) {
                    struct.ese.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, watch_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.re = new RetryException();
                    struct.re.read(iprot);
                    struct.setReIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ese = new ExpectStatusException();
                    struct.ese.read(iprot);
                    struct.setEseIsSet(true);
                }
            }
        }

    }

    public static class statusChange_args implements org.apache.thrift.TBase<statusChange_args, statusChange_args._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statusChange_args");

        private static final org.apache.thrift.protocol.TField OLD_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("oldStatus", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField NEW_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("newStatus", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new statusChange_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new statusChange_argsTupleSchemeFactory());
        }

        public int oldStatus; // required
        public int newStatus; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            OLD_STATUS((short)1, "oldStatus"),
            NEW_STATUS((short)2, "newStatus");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // OLD_STATUS
                        return OLD_STATUS;
                    case 2: // NEW_STATUS
                        return NEW_STATUS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __OLDSTATUS_ISSET_ID = 0;
        private static final int __NEWSTATUS_ISSET_ID = 1;
        private BitSet __isset_bit_vector = new BitSet(2);
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.OLD_STATUS, new org.apache.thrift.meta_data.FieldMetaData("oldStatus", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.NEW_STATUS, new org.apache.thrift.meta_data.FieldMetaData("newStatus", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statusChange_args.class, metaDataMap);
        }

        public statusChange_args() {
        }

        public statusChange_args(
                int oldStatus,
                int newStatus)
        {
            this();
            this.oldStatus = oldStatus;
            setOldStatusIsSet(true);
            this.newStatus = newStatus;
            setNewStatusIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public statusChange_args(statusChange_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.oldStatus = other.oldStatus;
            this.newStatus = other.newStatus;
        }

        public statusChange_args deepCopy() {
            return new statusChange_args(this);
        }

        @Override
        public void clear() {
            setOldStatusIsSet(false);
            this.oldStatus = 0;
            setNewStatusIsSet(false);
            this.newStatus = 0;
        }

        public int getOldStatus() {
            return this.oldStatus;
        }

        public statusChange_args setOldStatus(int oldStatus) {
            this.oldStatus = oldStatus;
            setOldStatusIsSet(true);
            return this;
        }

        public void unsetOldStatus() {
            __isset_bit_vector.clear(__OLDSTATUS_ISSET_ID);
        }

        /** Returns true if field oldStatus is set (has been assigned a value) and false otherwise */
        public boolean isSetOldStatus() {
            return __isset_bit_vector.get(__OLDSTATUS_ISSET_ID);
        }

        public void setOldStatusIsSet(boolean value) {
            __isset_bit_vector.set(__OLDSTATUS_ISSET_ID, value);
        }

        public int getNewStatus() {
            return this.newStatus;
        }

        public statusChange_args setNewStatus(int newStatus) {
            this.newStatus = newStatus;
            setNewStatusIsSet(true);
            return this;
        }

        public void unsetNewStatus() {
            __isset_bit_vector.clear(__NEWSTATUS_ISSET_ID);
        }

        /** Returns true if field newStatus is set (has been assigned a value) and false otherwise */
        public boolean isSetNewStatus() {
            return __isset_bit_vector.get(__NEWSTATUS_ISSET_ID);
        }

        public void setNewStatusIsSet(boolean value) {
            __isset_bit_vector.set(__NEWSTATUS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case OLD_STATUS:
                    if (value == null) {
                        unsetOldStatus();
                    } else {
                        setOldStatus((Integer)value);
                    }
                    break;

                case NEW_STATUS:
                    if (value == null) {
                        unsetNewStatus();
                    } else {
                        setNewStatus((Integer)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case OLD_STATUS:
                    return Integer.valueOf(getOldStatus());

                case NEW_STATUS:
                    return Integer.valueOf(getNewStatus());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case OLD_STATUS:
                    return isSetOldStatus();
                case NEW_STATUS:
                    return isSetNewStatus();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof statusChange_args)
                return this.equals((statusChange_args)that);
            return false;
        }

        public boolean equals(statusChange_args that) {
            if (that == null)
                return false;

            boolean this_present_oldStatus = true;
            boolean that_present_oldStatus = true;
            if (this_present_oldStatus || that_present_oldStatus) {
                if (!(this_present_oldStatus && that_present_oldStatus))
                    return false;
                if (this.oldStatus != that.oldStatus)
                    return false;
            }

            boolean this_present_newStatus = true;
            boolean that_present_newStatus = true;
            if (this_present_newStatus || that_present_newStatus) {
                if (!(this_present_newStatus && that_present_newStatus))
                    return false;
                if (this.newStatus != that.newStatus)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(statusChange_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            statusChange_args typedOther = (statusChange_args)other;

            lastComparison = Boolean.valueOf(isSetOldStatus()).compareTo(typedOther.isSetOldStatus());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOldStatus()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldStatus, typedOther.oldStatus);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetNewStatus()).compareTo(typedOther.isSetNewStatus());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNewStatus()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newStatus, typedOther.newStatus);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("statusChange_args(");
            boolean first = true;

            sb.append("oldStatus:");
            sb.append(this.oldStatus);
            first = false;
            if (!first) sb.append(", ");
            sb.append("newStatus:");
            sb.append(this.newStatus);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bit_vector = new BitSet(1);
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class statusChange_argsStandardSchemeFactory implements SchemeFactory {
            public statusChange_argsStandardScheme getScheme() {
                return new statusChange_argsStandardScheme();
            }
        }

        private static class statusChange_argsStandardScheme extends StandardScheme<statusChange_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, statusChange_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // OLD_STATUS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.oldStatus = iprot.readI32();
                                struct.setOldStatusIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // NEW_STATUS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.newStatus = iprot.readI32();
                                struct.setNewStatusIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, statusChange_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(OLD_STATUS_FIELD_DESC);
                oprot.writeI32(struct.oldStatus);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(NEW_STATUS_FIELD_DESC);
                oprot.writeI32(struct.newStatus);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class statusChange_argsTupleSchemeFactory implements SchemeFactory {
            public statusChange_argsTupleScheme getScheme() {
                return new statusChange_argsTupleScheme();
            }
        }

        private static class statusChange_argsTupleScheme extends TupleScheme<statusChange_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, statusChange_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetOldStatus()) {
                    optionals.set(0);
                }
                if (struct.isSetNewStatus()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetOldStatus()) {
                    oprot.writeI32(struct.oldStatus);
                }
                if (struct.isSetNewStatus()) {
                    oprot.writeI32(struct.newStatus);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, statusChange_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.oldStatus = iprot.readI32();
                    struct.setOldStatusIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.newStatus = iprot.readI32();
                    struct.setNewStatusIsSet(true);
                }
            }
        }

    }

}
