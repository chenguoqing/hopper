/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avro;  
@SuppressWarnings("all")
public class Message extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Message\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"to\",\"type\":\"string\"},{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"body\",\"type\":\"string\"}]}");
  @Deprecated public CharSequence to;
  @Deprecated public CharSequence from;
  @Deprecated public CharSequence body;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return to;
    case 1: return from;
    case 2: return body;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: to = (CharSequence)value$; break;
    case 1: from = (CharSequence)value$; break;
    case 2: body = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'to' field.
   */
  public CharSequence getTo() {
    return to;
  }

  /**
   * Sets the value of the 'to' field.
   * @param value the value to set.
   */
  public void setTo(CharSequence value) {
    this.to = value;
  }

  /**
   * Gets the value of the 'from' field.
   */
  public CharSequence getFrom() {
    return from;
  }

  /**
   * Sets the value of the 'from' field.
   * @param value the value to set.
   */
  public void setFrom(CharSequence value) {
    this.from = value;
  }

  /**
   * Gets the value of the 'body' field.
   */
  public CharSequence getBody() {
    return body;
  }

  /**
   * Sets the value of the 'body' field.
   * @param value the value to set.
   */
  public void setBody(CharSequence value) {
    this.body = value;
  }

  /** Creates a new Message RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }

  /** Creates a new Message RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /** Creates a new Message RecordBuilder by copying an existing Message instance */
  public static Builder newBuilder(Message other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for Message instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Message>
    implements org.apache.avro.data.RecordBuilder<Message> {

    private CharSequence to;
    private CharSequence from;
    private CharSequence body;

    /** Creates a new Builder */
    private Builder() {
      super(Message.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
    }

    /** Creates a Builder by copying an existing Message instance */
    private Builder(Message other) {
            super(Message.SCHEMA$);
      if (isValidValue(fields()[0], other.to)) {
        this.to = (CharSequence) data().deepCopy(fields()[0].schema(), other.to);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.from)) {
        this.from = (CharSequence) data().deepCopy(fields()[1].schema(), other.from);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.body)) {
        this.body = (CharSequence) data().deepCopy(fields()[2].schema(), other.body);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'to' field */
    public CharSequence getTo() {
      return to;
    }

    /** Sets the value of the 'to' field */
    public Builder setTo(CharSequence value) {
      validate(fields()[0], value);
      this.to = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'to' field has been set */
    public boolean hasTo() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'to' field */
    public Builder clearTo() {
      to = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'from' field */
    public CharSequence getFrom() {
      return from;
    }

    /** Sets the value of the 'from' field */
    public Builder setFrom(CharSequence value) {
      validate(fields()[1], value);
      this.from = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'from' field has been set */
    public boolean hasFrom() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'from' field */
    public Builder clearFrom() {
      from = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'body' field */
    public CharSequence getBody() {
      return body;
    }

    /** Sets the value of the 'body' field */
    public Builder setBody(CharSequence value) {
      validate(fields()[2], value);
      this.body = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /** Checks whether the 'body' field has been set */
    public boolean hasBody() {
      return fieldSetFlags()[2];
    }

    /** Clears the value of the 'body' field */
    public Builder clearBody() {
      body = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Message build() {
      try {
        Message record = new Message();
        record.to = fieldSetFlags()[0] ? this.to : (CharSequence) defaultValue(fields()[0]);
        record.from = fieldSetFlags()[1] ? this.from : (CharSequence) defaultValue(fields()[1]);
        record.body = fieldSetFlags()[2] ? this.body : (CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
